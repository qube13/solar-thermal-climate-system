/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.hska.stcs.flink.model.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6162248311110396041L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataRecord\",\"namespace\":\"stcs.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"double\",\"doc\":\"timestamp of collection of data\"},{\"name\":\"data\",\"type\":{\"type\":\"map\",\"values\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"bytes\",\"float\",\"long\",\"int\",\"boolean\"],\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** timestamp of collection of data */
  @Deprecated public double timestamp;
  @Deprecated public java.util.Map<String,Object> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataRecord() {}

  /**
   * All-args constructor.
   * @param timestamp timestamp of collection of data
   * @param data The new value for data
   */
  public DataRecord(Double timestamp, java.util.Map<String,Object> data) {
    this.timestamp = timestamp;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: timestamp = (Double)value$; break;
    case 1: data = (java.util.Map<String,Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return timestamp of collection of data
   */
  public Double getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * timestamp of collection of data
   * @param value the value to set.
   */
  public void setTimestamp(Double value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.Map<String,Object> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.Map<String,Object> value) {
    this.data = value;
  }

  /**
   * Creates a new DataRecord RecordBuilder.
   * @return A new DataRecord RecordBuilder
   */
  public static DataRecord.Builder newBuilder() {
    return new DataRecord.Builder();
  }

  /**
   * Creates a new DataRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataRecord RecordBuilder
   */
  public static DataRecord.Builder newBuilder(DataRecord.Builder other) {
    return new DataRecord.Builder(other);
  }

  /**
   * Creates a new DataRecord RecordBuilder by copying an existing DataRecord instance.
   * @param other The existing instance to copy.
   * @return A new DataRecord RecordBuilder
   */
  public static DataRecord.Builder newBuilder(DataRecord other) {
    return new DataRecord.Builder(other);
  }

  /**
   * RecordBuilder for DataRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataRecord>
    implements org.apache.avro.data.RecordBuilder<DataRecord> {

    /** timestamp of collection of data */
    private double timestamp;
    private java.util.Map<String,Object> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DataRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(DataRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * timestamp of collection of data
      * @return The value.
      */
    public Double getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * timestamp of collection of data
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public DataRecord.Builder setTimestamp(double value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * timestamp of collection of data
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * timestamp of collection of data
      * @return This builder.
      */
    public DataRecord.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.Map<String,Object> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public DataRecord.Builder setData(java.util.Map<String,Object> value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public DataRecord.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DataRecord build() {
      try {
        DataRecord record = new DataRecord();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (Double) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.util.Map<String,Object>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
